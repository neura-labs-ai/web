datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Library       Library[]
  Comment       Comment[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Library {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String    @unique
  description String?
  language    String?
  tags        String[]  @default([])
  imageIcon   String?
  stars       Int       @default(0)
  comments    Comment[]

  authorId String @db.ObjectId
  owner     User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model Comment {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  text  String
  stars Int

  libraryId String  @db.ObjectId
  library   Library @relation(fields: [libraryId], references: [id], onDelete: Cascade)
  authorId  String  @db.ObjectId
  owner      User    @relation(fields: [authorId], references: [id], onDelete: Cascade)
}
